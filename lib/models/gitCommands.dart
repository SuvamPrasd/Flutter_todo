const gitCommand = [
  {
    "title": "Setup & Init",
    "command1": 'git config --global user.name “[firstname lastname]”',
    "desc1":
        "set a name that is identifiable for credit when review version history",
    "command2": 'git config --global user.email “[valid-email]”',
    "desc2":
        "set an email address that will be associated with each history marker",
    "command3": 'git config --global color.ui auto',
    "desc3": "set automatic command line coloring for Git for easy reviewing",
    "command4": 'git init',
    "desc4": "initialize an existing directory as a Git repository",
    "command5": 'git clone [url]',
    "desc5": "retrieve an entire repository from a hosted location via URL",
  },
  {
    "title": "Stage & Snapshot",
    "command1": 'git status',
    "desc1":
        "show modified files in working directory, staged for your next commit",
    "command2": 'git add [file]',
    "desc2": "add a file as it looks now to your next commit (stage)",
    "command3": 'git reset [file]',
    "desc3": "unstage a file while retaining the changes in working directory",
    "command4": 'git diff',
    "desc4": "diff of what is changed but not staged",
    "command5": 'git commit -m “[descriptive message]”',
    "desc5": "commit your staged content as a new commit snapshot",
  },
  {
    "title": "Branch & Merge",
    "command1": 'git branch',
    "desc1":
        "list your branches. a * will appear next to the currently active branch",
    "command2": 'git branch [branch-name]',
    "desc2": "create a new branch at the current commit",
    "command3": 'git checkout',
    "desc3":
        "switch to another branch and check it out into your working directory",
    "command4": 'git merge [branch]',
    "desc4": "merge the specified branch’s history into the current one",
    "command5": 'git log',
    "desc5": "show all commits in the current branch’s history",
  },
  {
    "title": "Inspect & Compare",
    "command1": 'git log',
    "desc1": "show the commit history for the currently active branch",
    "command2": 'git log branchB..branchA',
    "desc2": "show the commits on branchA that are not on branchB",
    "command3": 'git log --follow [file]',
    "desc3": "show the commits that changed file, even across renames",
    "command4": 'git diff branchB...branchA',
    "desc4": "show the diff of what is in branchA that is not in branchB",
    "command5": 'git show [SHA]',
    "desc5": "show any object in Git in human-readable format",
  },
  {
    "title": "Share & Updates",
    "command1": 'git remote add [alias] [url]',
    "desc1": "add a git URL as an alias",
    "command2": 'git fetch [alias]',
    "desc2": "fetch down all the branches from that Git remote",
    "command3": 'git merge [alias]/[branch]',
    "desc3":
        "merge a remote branch into your current branch to bring it up to date",
    "command4": 'git push [alias] [branch]',
    "desc4": "Transmit local branch commits to the remote repository branch",
    "command5": 'git pull',
    "desc5": "fetch and merge any commits from the tracking remote branch",
  },
  {
    "title": "Tracking Path & History",
    "command1": 'git rm [file]',
    "desc1": "delete the file from project and stage the removal for commit",
    "command2": 'git mv [existing-pgit log --stat -Math] [new-path]',
    "desc2": "change an existing file path and stage the move",
    "command3": 'git log --follow [file]',
    "desc3": "show all commit logs with indication of any paths that moved",
    "command4": 'git rebase [branch]',
    "desc4": "apply any commits of current branch ahead of specified one",
    "command5": 'git reset --hard [commit]',
    "desc5": "clear staging area, rewrite working tree from specified commit",
  },
];
